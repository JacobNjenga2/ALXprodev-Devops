#!/bin/bash

# Batch Pok√©mon Data Retrieval Script with Error Handling and Retry Logic
# Loops through a list of Pok√©mon and retrieves data from the API

# Create pokemon_data directory if it doesn't exist
mkdir -p pokemon_data

# Create error log file
ERROR_LOG="pokemon_errors.log"
echo "Pok√©mon API Error Log - $(date)" > "$ERROR_LOG"

# List of Pok√©mon to fetch
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base API URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Maximum number of retry attempts
MAX_RETRIES=3

# Function to fetch Pok√©mon data with retry logic
fetch_pokemon_data() {
    local pokemon_name=$1
    local output_file="pokemon_data/${pokemon_name}.json"
    local retry_count=0
    local success=false
    
    echo "Fetching data for ${pokemon_name}..."
    
    # Retry loop
    while [ $retry_count -lt $MAX_RETRIES ] && [ "$success" = false ]; do
        # Make API request and save to file
        if curl -s -f "${API_BASE_URL}/${pokemon_name}" > "$output_file" 2>/dev/null; then
            echo "Saved data to ${output_file} ‚úÖ"
            success=true
        else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $MAX_RETRIES ]; then
                echo "Attempt ${retry_count} failed for ${pokemon_name}. Retrying in 2 seconds..."
                sleep 2
            else
                echo "Error: Failed to fetch data for ${pokemon_name} after ${MAX_RETRIES} attempts ‚ùå"
                echo "$(date): Failed to fetch data for ${pokemon_name} after ${MAX_RETRIES} attempts" >> "$ERROR_LOG"
                return 1
            fi
        fi
    done
}

# Main execution
echo "Starting batch Pok√©mon data retrieval..."

for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon_data "$pokemon"
    
    # Add delay between requests to avoid rate limiting (1 second)
    if [ "$pokemon" != "${pokemon_list[-1]}" ]; then
        sleep 1
    fi
done

echo "Batch retrieval completed!"

# Display error summary if any errors occurred
if [ -s "$ERROR_LOG" ] && [ "$(wc -l < "$ERROR_LOG")" -gt 1 ]; then
    echo ""
    echo "Error Summary:"
    echo "Some Pok√©mon data could not be retrieved. Check ${ERROR_LOG} for details."
else
    echo ""
    echo "All Pok√©mon data retrieved successfully! üéâ"
fi 